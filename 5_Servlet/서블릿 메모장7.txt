* 서블릿은 [	] 코드로 웹 애플리케이션의 [		]인 처리를 담당한다.
* JSP는 [       ] 코드 안에 [      ] 코드를 포함시켜 [      ] 웹 페이지를 생성한다.


* 서블릿은 HttpServlet 클래스를 [      ] 받는 자바 클래스이다.
	get 요청에 대하여는 [        ] 메소드가 실행되고,
	post 요청에 대하여는 [         ] 메소드가 실행된다.

	요청 시 전달되는 데이터는 
		해당하는 키의 하나의 데이터를 뽑아올 때는 request.[           ] 메소드를 호출하며 반환타입은 [	] 이다.
		해당하는 키의 여러 개의 데이터를 뽑아올 때는 request.[            ] 메소드를 호출하며 반환타입은 [	] 이다.


* MVC(Model-View-Controller) 패턴에서,
	클라이언트로부터의 요청은 주로 [         ]에서 처리되며,
	이후 요청된 데이터는 [        ]에서 처리되어 비즈니스 로직을 수행한다.
	비즈니스 로직 처리가 완료된 데이터는 [         ]를 통해 적절한 형태로 화면(View)에 전달된다.


* 클라이언트로부터 요청이 처리된 후, 처리 작업이 완료되면 [        ]를 요청한 곳으로 전달한다.
	JSP로 작성한 페이지를 응답할 경우 [  RequestDispatcher         ] 객체를 사용하여 포워딩(forward)을 한다.
	URL에 화면(view) 파일 경로를 그대로 노출시키지 않고자 할 경우 특정 URL로 재요청하는 방식을 사용하는데,
	[   response(HttpServletResponse)    ] 객체의 [ sendRedirect(url)      ] 메소드를 사용하여 응답한다.
	

* JSP 표현법
1. 스크립팅 원소 (Scripting Element) : JSP 페이지에서 자바 코드를 작성할 수 있게 해주는 기능
	- 스크립트릿 : [   <% %>     ] 가장 기본적인 표현법
	- 표현식/출력식 : [  <%= %>      ] 화면에 출력할 때 사용
	- 선언식 : [ <%! %>       ] 멤버 변수나 메소드 선언 시 사용

2. 지시어 (Directive) : JSP 페이지 전체에 영향을 미치는 정보를 작성할 때 사용
	표현법 : [    <%@ %>        ]
	- [  page      ] : 현재 JSP 페이지를 처리하는데 필요한 각종 속성들을 기술
		- language : 사용할 언어 유형
		- contentType : 해당 페이지의 형식, 문자셋
		- pageEncoding : JSP 페이지 내에 기록된 자바 코드의 인코딩 방식
		- import : 자바의 import와 같은 의미
		- errorPage : JSP 상에 오류 발생 시 보여줄 에러페이지 파일 경로
	- include : [  현재 jsp 페이지에 다른 jsp 페이지를 포함시키고자 할 때 사용          ]
		ex) <%@ include file="포함시킬파일경로(상대경로)"%> ../common/
	- taglib : JSP 기능을 확장 시킬 수 있는 라이브러리를 추가할 때 사용

3. 클라이언트(프론트)에서 요청 시
	[1] form 태그 사용
	form 태그의 아래 속성을 작성하여 요청
		- action : [  요청 url(주소)      ]
		- method : [ 요청 방식(get, post)       ]
	form 태그 내의 입력 요소들의 속성
		Map 형식
		- name : [ "Key"        ]
		- value : [ "Value/Data"       ]

	<form>
		<!-- 입력 요소들 작성 -->
	</form>				
	[2] location 객체 사용 ([ get	] 방식만 요청)
	사용법: [location.href='요청URL?키=데이터&키=데이터'	]