* 서블릿 :  [	웹서비스를 위한 자바 클래스           ]
	  사용자의 요청을 받아 처리하고 응답 페이지를 만들어 다시 사용자에게 전송
	  웹에서 동적인 페이지를 자바로 구현할 수 있게 도와주는 서버 측 프로그램
    [   자바   ]로 [html      ] 구현 (키워드: 자바, HTML)

* 요청 방식
	- GET 방식
	   + 특징1. [ URL헤더 영역	]에 데이터를 포함시켜 요청
	   + 특징2. 전송 데이터의 제한이 있음
	   + 특징3. URL에 데이터가 노출되므로 즐겨찾기 기능 가능
	- POST 방식
	   + 특징1. [ URL body영역	  ]에 데이터를 포함시켜 요청
	   + 특징2. 전송 데이터의 제한이 없음
	   + 특징3. 즐겨찾기(북마크)는 가능하나, 데이터가 url에 노출되지 않아 기존 화면과 다를 수 있음
	   + 특징4. 타임 아웃이 존재하기 때문에 페이지 요청에 기다리는 시간 있음

* 서블릿은 [	HttpServlet	]의 상속을 받아 작성하며,
	GET 요청 시 [doGet	    ] 메소드가 실행되고,
	POST 요청 시 [doPost	   ] 메소드가 실행된다.
	- 두 메소드는 모두 2개의 매개변수를 받는데,
		첫번째 매개변수인 [request(HttpServletRequest)	]는 요청 시 전달되는 내용들이 담겨져 있고,
		두번째 매개변수인 [response(HttpServletResponse)]는 요청에 대한 처리 후 응답할 때 사용되는 객체이다.
	- 요청 시 전달된 데이터를 확인하기 위해 사용되는 메소드는
		[getParameter  ]와 [ getParameterValues] 가 있다.
		+ [	getParameter	] 메소드는 전달된 키값에 해당되는 밸류값을 String 형식으로 반환한다.
		+ [getParameterValues		] 메소드는 전달된 키값에 해당되는 밸류값들을 String[] 형식으로 반환한다.

	- 단순하게 서블릿을 구현하는 경우 GET 요청과 POST 요청은 내부적으로 동일하게 처리된다.
    

* 서블릿 응답 순서
	1) 출력할 내용의 [	문서형태	]와 [	문자셋(인코딩)	]를 설정
	   * response.setContentType(["text/html;charset=utf-8"]);
	2) 요청한 곳으로 [	"스트림"	] 생성
	   * response.[getWriter()] 사용 : PrintWriter 타입 반환
	3) 생성된 ["스트림" ]을 통해 [ 응답 페이지]을 작성
	   * 서블릿으로 응답할 경우 : [스트림변수.print] 사용
	   * jsp로 응답할 경우 : [dispatcher변수.forward()] 사용
		-> RequestDispatcher 객체
* jsp : [ 	HTML    ] 내에 [ 자바코드       ]를 작성할 수 있는 "[  자바  ] 언어"
        JSP 는 [   화면 로직  ]을 구현하는 데 집중하고, 서블릿은 [     비즈니스 로직       ]에 집중할 수 있음

* 표현법
	1) [  스크립팅        ] 원소 ([ Scripting  Element) : JSP 페이지에서 [ 자바   ] 코드를 작성할 수 있게 해주는 기능
	    [1] 스크립트릿 : <% 코드 %>
			가장 기본적인 표현법
	    [2] 표현식(출력식) : <%= 코드 %>
			화면에 출력할 때 사용
	    [3] 선언문 : <%! 코드 %>
			멤버변수나 메소드 선언 시 사용

	2) [ 지시어   ] (Directive) : JSP 페이지 전체에 영향을 미치는 정보를 작성할 때 사용
	    [1] page : 현재 jsp 페이지를 처리하는 데 필요한 각종 속성들을 기술
		* language : 사용할 언어의 유형
		* contentType : 해당 페이지 형식, 문자셋 지정 - HTML 인코딩 방식 지정
		* pageEncoding : jsp페이지 내에 기록된 [ 자바 코드]의 인코딩 방식
		* import : [자바의 import]와 같은 의미
		* errorPage : jsp 상에 오류 발생 시 보여줄 에러페이지 경로 지정
	    [2] include : 현재 jsp 상에 [  또 다른 jsp페이지] 를 포함하고자 할 때 사용
	    [3] taglib : jsp 기능을 확장 시킬 수 있는 라이브러리를 추가할 때 사용
---------------------------------------------------------------------------------------------------
* form 태그를 사용하여 요청
	{ 아래 빈칸에 들어갈 속성을 작성해주세요. }
	- [  action      ] : 요청 주소(목적지) 작성
	- [  method      ] : 요청 방식 작성
* 입력 요소(태그)의 [ name   ] 속성을 키값으로,
     [  value  ] 속성을 밸류 값으로 데이터가 전송된다.