package com.kh.object;

public class ObjectMemo {
	/*
	 * 클래스 (객체)
	 * : 필드부(변수) + 생성자부 + 메소드부
	 * 
	 *  - 객체란? 객관적으로 실존하는 모든 실체(물질)
	 *  		식별 가능한 개체 또는 사물
	 *  
	 *  - 클래스 사용하는 이유?
	 *    : 변수 = 하나의 자료형 하나의 데이터를 저장하는 공간 
	 *    :	배열 = 하나의 자료형 여러개의 데이터를 저장하는 공간
	 *    : 클래스 = 여러 자료형 여러개의 데이터를 저장하는 공간
	 *    
	 *  - 추상화 과정 : 객체를 클래스로 표현하기 위해 준비하는 과정
	 *    [1] 필요성 상관없이 데이터와 기능들을 나열
	 *    [2] 프로그램에 필요한 정보를 추출
	 *    [3] 자료형과 변수명, 메소드 정의
	 *    
	 *  - 표현법
	 *  
	 *  		[접근 제한자] [예약어] class 클래스명 {
	 *  		}
	 *  		* 클래스명 : 대문자로 시작
	 *  		* 접근 제한자
	 *  		  - public : 어디서든 접근 가능 (+)
	 *  		  - (default) : 같은 패키지 내에서 접근 가능 (~)
	 *  
	 *  - 필드부 : 변수/데이터 
	 *  
	 *  		[접근 제한자] [예약어] 데이터타입(자료형) 변수명 (=값);
	 *  		* 접근 제한자
	 *  		  - public
	 *  		  - protected : 같은 패키지 내 또는 상속관계인 경우 접근 가능 (#)
	 *  		  - (default)
	 *  		  - private : 클래스 내에서만 접근 가능 (-)
	 *  
	 *  			* 캡슐화 : 데이터에 직접 접근을 막고 간접적으로 접근할 수 있도록 처리
	 *  				[1] 변수를 private으로 선언
	 *  				[2] public으로 선언된 메소드를 통해 데이터 처리 (getter/setter)
	 *  
	 *  					- get 메소드 : public 반환타입(변수타입) getXxx() { return xxx; }
	 *  					- set 메소드 : public void setXxx(변수타입 xxx) { this.xxx = xxx; }
	 *  
	 *  - 생성자부 : 클래스를 메모리에 할당할 때 사용
	 *  		   클래스 내의 변수의 값을 초기화
	 *  		   오버로딩이 가능	
	 *  		[접근 제한자] 클래스명([매개변수]) {
	 *  		}
	 *  
	 *  		* 오버로딩 : 같은 이름의 메소드를 여러 개 정의한 것
	 *  					- 메소드명이 같아야함.
	 *  					- 매개변수의 타입이나 개수가 달라야 함.	
	 *  
	 *  - 메소드부 : 기능/동작을 정의하는 부
	 *  
	 *  		[접근 제한자] [예약어] 반환타입 메소드명([매개변수]) {
	 *  			//기능 정의
	 *  		}		  
	 *  		
	 *  		* 접근 제한자 : public/protected/(default)/private
	 *  		* 반환타입
	 *  				- 반환타입 없는 경우 : void
	 *  				- 반환타입 있는 경우 : 기본자료형(int, double, char, ...)
	 *  								  참조자료형(String, Integer, Double, ...)
	 *  								  클래스(Person, Car, Phone, ...)
	 *  								  배열 (int[], String[], Car[], ...)
	 *  		* 메소드명 : 메소드를 호출할 때 사용하는 이름
	 *  				   소문자로 시작 (관례)
	 *  				   낙타표기법(camelCase)
	 *  		* 매개변수 : 메소드 내에서 사용하기 위해 전달받은 값(데이터)
	 *  				   생략 가능
	 *  				   - 표현법 : 데이터타입 변수명		
	 *  		* 반환 값 : 메소드 결과 값으로 전달하는 값
	 *  				   - return : 결과 값을 전달하는 역할/ 메소드를 종료하는 역할
	 *  
	 *  		* 예약어 : static
	 *  				 - 프로그램 실행(시작) 시 메모리에 할당(static 메모리 영역)
	 *  				 - 인스턴스 생성 없이(메모리에 객체 할당 없이) 사용 가능
	 *  					ex)클래스명.변수명 / 클래스명.메소드명()	
	 *  						Math.PI, System.out.println("..."), Math.random(), ...
	 *  				 - 동일한 객체 간에 데이터 공유 가능
	 *  
	 *  - 객체(클래스) 배열
	 *  	 * 표현식
	 *  			 클래스명[] 배열명 = new 클래스명[배열크기]	// 배열 선언 및 할당
	 *  			 배열명[0] = new 클래스명();		//객체 생성
	 *  			 배열명[1] = new 클래스명();
	 *  			 배열명[n-1] = new 클래스명();		// n-1 : 배열크기 - 1
	 *  
	 *  			 ex) 첫번째 배열의 객체를 사용한다면?
	 *  				 배열명[0].변수명
	 *  				 배열명[0].메소드명()
	 *  	* 객체 배열의 경우 배열을 선언 및 할당 한 후에 각 배열 아이템에 객체 생성 작업이 필요!
	 *  
	 *  							 
	 */    
}
